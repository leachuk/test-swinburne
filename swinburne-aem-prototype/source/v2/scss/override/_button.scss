// PLEASE NOTE!!
//
// This overrides only styles that aren't configurable by Bootstrap, please take
// care when making changes as we shouldn't be duplicating styles that Bootstrap
// generates for us automatically.

.btn {
  align-items: center;
  display: inline-flex;
  height: 50px;
  letter-spacing: -.5px;
  min-width: 175px;
  position: relative;

  // Colour variants
  //
  // Pattern:
  // <variant name>: ( <base colour>, <text colour>, <hover colour>, <shadow colour (on hover)>, <border colour (optional)>, <border colour (on hover, optional)> )
  $button-colours: (
    primary-red:        (theme-color('c1'), $white, null, #ad1914, null, null),
    primary-yellow:     (#ffeb14, $black, #ffd200, #fcb945, null, null), // C2 here??
    secondary-charcoal: (theme-color('c3'), $white, #58595b, $black, null, null),
    secondary-white:    ($white, $black, null, theme-color('g3'), null, null),
    secondary-outline:  (transparent, $black, null, theme-color('c3'), theme-color('g4'), theme-color('c3')),
  );

  @each $variant, $options in $button-colours {
    $base-colour: nth($options, 1);
    $border-colour: nth($options, 5);
    $border-hover-colour: nth($options, 6);
    $hover-colour: nth($options, 3);
    $is-secondary-outline: $variant == 'secondary-outline';
    $shadow-colour: nth($options, 4);
    $text-colour: nth($options, 2);

    &-#{$variant} {
      background-color: $base-colour;
      // If no border colour is given we use the base colour to avoid hover state issues
      border-color: if($border-colour != null, $border-colour, $base-colour);
      color: $text-colour;

      &::before {
        border-bottom-color: $shadow-colour;
      }

      &:not(:active) {
        $border-hover-colour: if($border-hover-colour != null, $border-hover-colour, $hover-colour);

        @include hover {
          background-color: $hover-colour;
          border-color: if($border-hover-colour != null, $border-hover-colour, $hover-colour);
          color: $text-colour;

          @if $is-secondary-outline == true {
            .bg-dark & {
              border-color: currentColor;
              color: $white;

              &::before {
                border-bottom-color: $white;
              }
            }
          }
        }
      }

      &:active {
        color: $text-colour;
      }

      @if $is-secondary-outline == true {
        .bg-dark & {
          background-color: transparent;
          border-color: currentColor;
          color: $white;
        }
      }
    }
  }

  @include hover {
    // Hover padding offset to account for the box shadow that appears
    &:not(.btn-link):not(:active) {
      .link-text,
      &::after {
        transform: translateY(-2px);
      }

      &::before {
        opacity: 1;
      }
    }
  }

  &-sm {
    height: 40px;
  }

  &-lg {
    height: 60px;
  }

  // Override the link button styles
  &-link {
    color: theme-color('c6');
    padding: 0;
    position: relative;

    // &:not(.no-icon)::after {
    //   @include pseudo-icon('plus');
    // }

    @include hover-focus {
      color: theme-color('c1');
      text-decoration: none;

      // &::after {
      //   transform: rotate(180deg);
      // }
    }
  }

  // Disabled state
  &.disabled:not(.btn-link),
  &:disabled {
    background-color: theme-color('g4');
    border-color: theme-color('g4');
    color: #808285;

    &.btn-secondary-outline {
      background-color: transparent;
      border-color: rgba(#adadad, .5);
      color: rgba(#808285, .5);

      .bg-dark & {
        border-color: rgba($white, .5);
        color: rgba($white, .5);
      }
    }
  }

  &::before {
    border-bottom-style: solid;
    border-bottom-width: 2px;
    border-radius: $btn-border-radius;
    bottom: -1px;
    content: '';
    display: block;
    height: calc(100% + 1px);
    left: 0;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    transition: opacity .15s ease-in-out;
    width: 100%;
  }

  &::after {
    @extend .fal;
    @extend .fa-long-arrow-right::before;

    display: block;
    font-size: 18px;
    margin-left: auto;
  }

  .link-text,
  &::after {
    transition: transform .15s ease-in-out;
  }

  & + & {
    margin-top: $spacing-sm;

    @include media-breakpoint-up(md) {
      margin-left: 30px;
      margin-top: 0;
    }
  }

  @include media-breakpoint-down(sm) {
    // When the button isn't `.btn-lg` or `.btn-sm`, set the button styles correctly for mobile
    // devices which inherit the `.btn-sm` styles.
    &:not(&-sm):not(&-lg) {
      font-size: $btn-font-size-sm;
      height: 40px;
      line-height: $btn-line-height-sm;
    }
  }
}
