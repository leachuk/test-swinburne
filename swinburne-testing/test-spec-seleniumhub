#!/bin/bash

#################################
# DECLARATION
#################################

CURL=$(/usr/bin/which curl)
GREP=$(/usr/bin/which grep)

DEFAULT_HUB_ADDRESS="${1:-http://0.0.0.0:4444}"
DEFAULT_PARAMS=""${@:2}""
DEFAULT_IMAGE="aemdesign/centos-java-buildpack"
DEFAULT_COMMAND="cd swinburne-parent/swinburne-testing && ./test-spec"
DEFAULT_REPORT_PATH="generated-docs/summary.html"
DEFAULT_OPEN_REPORT="true"
DEFAULT_DRIVERS_EXEC="remote-seleniumhub-chrome "

echo ""
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "Usage:"
echo ""
echo " ./test-spec-seleniumhub <SELENIUM HUB ADDRESS> <MAVEN PARAMS>"
echo ""
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""

#################################
# FUNCTIONS
#################################


function runTest() {
    local DRIVER=$1
    local COMMAND="$DEFAULT_COMMAND $DRIVER $DEFAULT_PARAMS"

    local CONTAINER_EXIST=$(docker ps -q -f name=$DRIVER)

    #check if container exist
    if [ ! "$(docker ps -q -f name=$DRIVER)" ]; then
        if [ "$(docker ps -aq -f status=exited -f name=$DRIVER)" ]; then
            # cleanup
            echo " - CONTAINER FINISHED REMOVING: $DRIVER"
            docker rm $DRIVER
        fi
        echo " - RUNNING CONTAINER: $DRIVER"
        START=$(docker run --rm -d --name $DRIVER -v $(pwd)/../..:/build -v ~/.m2:/root/.m2 $DEFAULT_IMAGE /bin/sh -c "$COMMAND")
    else
        echo " - CONTAINER ALREADY RUNNING: $DRIVER"
    fi

}


function runTests() {
    declare -a DRIVERS_EXEC=($@)

    DRIVERS_EXEC_LENGTH=${#DRIVERS_EXEC[@]}

    for (( i=1; i<${DRIVERS_EXEC_LENGTH}+1; i++ ));
    do
        ITEM_VALUE=${DRIVERS_EXEC[$i-1]}
        echo "STARTING CONTAINER: [$i/${DRIVERS_EXEC_LENGTH}] $ITEM_VALUE"
        runTest "$ITEM_VALUE"
    done
}

function monitorTests() {

    declare -a OPEN_REPORTS=($@)

    OPEN_REPORTS_LENGTH=${#OPEN_REPORTS[@]}


    echo ""
    echo "-----------------------------------------------------------------"
    echo ""
    echo "MONITORING CONTAINERS"
    echo " - AUTO OPEN RESULTS: $DEFAULT_OPEN_REPORT"
    echo ""
    echo "================================================================="
    echo ""
    while true; do
        COMMAND=$(docker inspect --format='{{.Name}}: {{.State.Status}} started @ {{.State.StartedAt}}' $@ 2>&1) #Save command result in a var.
        echo "$COMMAND" #Print command result, including new lines.

        sleep 3 #Keep above's output on screen during 3 seconds before clearing it

        #exit if all containers closed
        if [[ -z "${COMMAND##started*}" ]]; then

            if [[ "$DEFAULT_OPEN_REPORT" == "true" ]]; then
                #walk thought reports and see if the reports are ready to open
                for (( i=1; i<${OPEN_REPORTS_LENGTH}+1; i++ ));
                do
                    ITEM_VALUE=${OPEN_REPORTS[$i-1]}
                    echo "CHECKING REPORT: [$i/${OPEN_REPORTS_LENGTH}] $ITEM_VALUE"
                    if [[ -e "$ITEM_VALUE/$DEFAULT_REPORT_PATH" ]]; then
                        echo "OPENING REPORT: $ITEM_VALUE/$DEFAULT_REPORT_PATH"
                        OPEN_REPORT=$(groovy -Dproject.buildDirectory=$ITEM_VALUE openReport.groovy)
                    fi
                done
            fi

            echo "ALL DONE"
            break
        fi

        #Following code clears previously printed lines
        LINES=$(echo "$COMMAND" | wc -l) #Calculate number of lines for the output previously printed
        for (( i=1; i <= $(($LINES)); i++ ));do #For each line printed as a result of "$COMMAND"
            tput cuu1 #Move cursor up by one line
            tput el #Clear the line
        done

        #Allow for the spurious \n when using --format with inspect
        if [[ -z "${COMMAND##\n*}" ]]; then
            tput cuu1 #Move cursor up by one line
            tput el #Clear the line
        fi

    done
}

function testHub() {

    local ADDRESS="$DEFAULT_HUB_ADDRESS"

    local RESULT="$($CURL -L --write-out %{http_code} --silent --output /dev/null ${ADDRESS} | $GREP -q "000" && echo false || echo true)"

    echo $RESULT

}


#################################
# MAIN LOGIC
#################################

DEFAULT_HUB_AVAIABLE=$(testHub)

if [[ "true" == "$DEFAULT_HUB_AVAIABLE" ]]; then
    echo "SELENIUM HUB IS AVAILABLE at $DEFAULT_HUB_ADDRESS"

    runTests $DEFAULT_DRIVERS_EXEC
    #runTest "remote-seleniumhub-chrome"
    #runTest "remote-seleniumhub-firefox"

    monitorTests $DEFAULT_DRIVERS_EXEC
else
    echo "SELENIUM HUB NOT AVAILABLE at $DEFAULT_HUB_ADDRESS"
fi
